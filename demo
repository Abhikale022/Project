import React, { useState, useEffect } from "react";
import { FaCheckCircle, FaRegCircle } from "react-icons/fa";
import axios from "axios";
import "../ApplicationStatus.css";

const ApplicationStatus = ({ applicationId }) => {
  const [application, setApplication] = useState(null);

  const steps = [
    "Application Submitted",
    "Application Processing",
    "Credit Card Offered",
    "Application Accepted",
    "Printed",
    "Shipped",
  ];

  useEffect(() => {
    if (applicationId) {
      axios
        .get(`http://localhost:8080/api/transactions/${applicationId}`)
        .then((res) => setApplication(res.data))
        .catch((err) => console.error("Error fetching app:", err));
    }
  }, [applicationId]);

  if (!application) return <p>Loading...</p>;

  const currentStageIndex = steps.indexOf(application.applicationTimeline);

  return (
    <div className="status-container">
      <h3 className="status-header">Credit Card Application Status</h3>
      <p className="status-subtitle">
        Track your application progress. We'll keep you updated at every step.
      </p>

      {/* Progress Bar */}
      <div className="progress-box">
        <div className="progress-header">
          <span>Overall Progress</span>
          <span className="progress-label">
            {currentStageIndex === steps.length - 1 ? "Completed" : "In Progress"}
          </span>
        </div>
        <div className="progress-bar">
          <div
            className="progress-fill"
            style={{
              width: `${((currentStageIndex + 1) / steps.length) * 100}%`,
            }}
          ></div>
        </div>
        <p className="progress-info">
          Step {currentStageIndex + 1} of {steps.length} completed
        </p>
      </div>

      {/* Timeline */}
      <h4 className="timeline-title">Application Timeline</h4>
      <div className="timeline">
        {steps.map((step, index) => (
          <div className="timeline-step" key={index}>
            <div className="timeline-icon">
              {index <= currentStageIndex ? (
                <FaCheckCircle className="icon completed" />
              ) : (
                <FaRegCircle className="icon pending" />
              )}
              {index !== steps.length - 1 && <div className="timeline-line"></div>}
            </div>
            <div className="timeline-content">
              <div className="timeline-top">
                <div
                  className={`timeline-title-text ${
                    index === currentStageIndex ? "highlight" : ""
                  }`}
                >
                  {step}
                  {index === currentStageIndex && (
                    <span className="badge-action">Action Required</span>
                  )}
                </div>
              </div>
              <div className="timeline-desc">
                {index <= currentStageIndex
                  ? "Completed"
                  : "Pending..."}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ApplicationStatus;