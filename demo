package com.scb.creditcardorigination.customerLoginSignup.Model;

import jakarta.persistence.*;

@Entity
    @Table(name = "customer_login_signup")
    public class CustomerLoginSignup {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @Column(nullable = false)
        private String name;

        @Column(nullable = false, unique = true)
        private String email;

        @Column(nullable = false)
        private String password;

        public CustomerLoginSignup() {}

        public CustomerLoginSignup(String name, String email, String password) {
            this.name = name;
            this.email = email;
            this.password = password;
        }

        // Getters & Setters
        public Long getId() { return id; }
        public void setId(Long id) { this.id = id; }
        public String getName() { return name; }
        public void setName(String name) { this.name = name; }
        public String getEmail() { return email; }
        public void setEmail(String email) { this.email = email; }
        public String getPassword() { return password; }
        public void setPassword(String password) { this.password = password; }
    }

package com.scb.creditcardorigination.customerLoginSignup.config;

import com.scb.creditcardorigination.customerLoginSignup.Service.CustomUserDetailsService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
@Configuration
public class SecurityConfig {
    private final CustomUserDetailsService userDetailsService;
    private final JwtRequestFilter jwtRequestFilter;

    public SecurityConfig(CustomUserDetailsService userDetailsService, JwtRequestFilter jwtRequestFilter) {
        this.userDetailsService = userDetailsService;
        this.jwtRequestFilter = jwtRequestFilter;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public DaoAuthenticationProvider authProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf ->csrf.disable())
                .authorizeHttpRequests(auth -> auth
                    .requestMatchers("/customer/signup", "/customer/login").permitAll()
                    .anyRequest().authenticated()
                )
                .sessionManagement(session->session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
        http.authenticationProvider(authProvider());
        http.cors(cors-> {});
        return http.build();
    }
}
package com.scb.creditcardorigination.customerLoginSignup.Service;

import com.scb.creditcardorigination.customerLoginSignup.Model.CustomerLoginSignup;
import com.scb.creditcardorigination.customerLoginSignup.Repository.CustomerLoginSignupRepository;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class CustomerLoginSignupServiceImpl implements CustomerLoginSignupService{
    private final CustomerLoginSignupRepository repository;
    private final PasswordEncoder passwordEncoder;

    public CustomerLoginSignupServiceImpl(CustomerLoginSignupRepository repository,
                                          PasswordEncoder passwordEncoder) {
        this.repository = repository;
        this.passwordEncoder = passwordEncoder;
    }

    @Override
    public CustomerLoginSignup register(CustomerLoginSignup customer) {
        if (repository.findByEmail(customer.getEmail()).isPresent()) {
            throw new RuntimeException("Email already registered");
        }
        // Hash the password before saving
        customer.setPassword(passwordEncoder.encode(customer.getPassword()));
        return repository.save(customer);
    }

    @Override
    public CustomerLoginSignup login(String email, String rawPassword) {
        CustomerLoginSignup customer = repository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Invalid credentials"));

        // Compare hashed password with raw password
        if (!passwordEncoder.matches(rawPassword, customer.getPassword())) {
            throw new RuntimeException("Invalid credentials");
        }

        return customer;
    }
}

package com.scb.creditcardorigination.customerLoginSignup.Service;

import com.scb.creditcardorigination.customerLoginSignup.Model.CustomerLoginSignup;
import com.scb.creditcardorigination.customerLoginSignup.Repository.CustomerLoginSignupRepository;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.Collections;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    private final CustomerLoginSignupRepository repository;

    public CustomUserDetailsService(CustomerLoginSignupRepository repository) {
        this.repository = repository;
    }

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        CustomerLoginSignup customer = repository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with email: " + email));

        return new User(
                customer.getEmail(),
                customer.getPassword(),
                Collections.emptyList() // no roles/authorities for now
        );
    }
}

package com.scb.creditcardorigination.customerLoginSignup.config;

import com.scb.creditcardorigination.customerLoginSignup.Service.CustomUserDetailsService;
import com.scb.creditcardorigination.customerLoginSignup.Service.JwtUtil;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class JwtRequestFilter extends OncePerRequestFilter {
    private final CustomUserDetailsService userDetailsService;
    private final JwtUtil jwtUtil;

    @Autowired
    public JwtRequestFilter(CustomUserDetailsService userDetailsService, JwtUtil jwtUtil) {
        this.userDetailsService = userDetailsService;
        this.jwtUtil = jwtUtil;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
            throws ServletException, IOException {
        String path = request.getServletPath();

        // 🔑 Skip JWT validation for login & signup
        if (path.equals("/customer/login") || path.equals("/customer/signup")) {
            chain.doFilter(request, response);
            return;
        }

        final String authHeader = request.getHeader("Authorization");

        String username = null;
        String jwt = null;

        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            jwt = authHeader.substring(7);
            username = jwtUtil.extractUsername(jwt);
        }

        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);

            if (jwtUtil.validateToken(jwt, userDetails)) {
                UsernamePasswordAuthenticationToken authToken =
                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        }
        chain.doFilter(request, response);
    }
}
package com.scb.creditcardorigination.customerLoginSignup.Model;

public class AuthRequest {
    private String email;
    private String password;

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }

}
package com.scb.creditcardorigination.customerLoginSignup.Model;

public class AuthResponse {
    private String token;

    public AuthResponse(String token) {
        this.token = token;
    }

    public String getToken() {
        return token;
    }
    public void setToken(String token){
        this.token=token;
    }
}
package com.scb.creditcardorigination.customerLoginSignup.Repository;
import com.scb.creditcardorigination.customerLoginSignup.Model.CustomerLoginSignup;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.stereotype.Repository;

import java.util.Optional;
@Repository
public interface CustomerLoginSignupRepository extends JpaRepository<CustomerLoginSignup, Long> {
    Optional<CustomerLoginSignup> findByEmail(String email);
}

package com.scb.creditcardorigination.TransactionProcessingSystem.controller;

import com.scb.creditcardorigination.TransactionProcessingSystem.model.Transaction;
import com.scb.creditcardorigination.TransactionProcessingSystem.service.TransactionService;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/transactions")
public class TransactionController {
    private final TransactionService transactionService;

    public TransactionController(TransactionService transactionService) {
        this.transactionService = transactionService;
    }

    @PostMapping("/create")
    public Transaction createTransaction(@RequestBody Transaction transaction) {
        return transactionService.saveTransaction(transaction);
    }
    //    {
//        "customerId": 1005,
//            "name": "saba",
//            "dob": "2003-04-29",
//            "email": "saba@example.com",
//            "phone": "+91-9876112233",
//            "creditScore": 720,
//            "product": "Gold Rewards Card",
//            "validityPeriod": "2025-2030",
//            "creditLimit": "₹1,80,000",
//            "status": "Approved" ,
//            "processed_by" :"System -auto- decision",
//            "Application-Timeline" :"Printed"
//
//    }
    @GetMapping("/all")
    public List<Transaction> getAllTransactions() {
        return transactionService.getAllTransactions();
    }

    @PutMapping("/{id}/timeline")
    public Transaction updateTimeline(@PathVariable Long id, @RequestBody Map<String, String> request) {
        String newTimeline = request.get("applicationTimeline");
        return transactionService.updateTimeline(id, newTimeline);
    }
    @GetMapping("/{id}")
    public Transaction getTransactionById(@PathVariable long id){
        return transactionService.getTransactionById(id);
    }
}
package com.scb.creditcardorigination.TransactionProcessingSystem.model;

import jakarta.persistence.*;

import java.time.LocalDate;

@Entity
@Table(name = "transactions")
public class Transaction {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private Long customerId;
    private String name;
    private String dob;
    private String email;
    private String phone;
    private int creditScore;
    private String product;
    private String validityPeriod;
    private String creditLimit;
    private String status;
    private LocalDate approvalDate;  // Auto-filled
    private  String processedBy;
    private  String applicationTimeLine;

    public String getProcessedBy() {
        return processedBy;
    }

    public void setProcessedBy(String processedBy) {
        this.processedBy = processedBy;
    }

    public String getApplicationTimeLine() {
        return applicationTimeLine;
    }

    public void setApplicationTimeLine(String applicationTimeLine) {
        this.applicationTimeLine = applicationTimeLine;
    }


    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public Long getCustomerId() { return customerId; }
    public void setCustomerId(Long customerId) { this.customerId = customerId; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getDob() { return dob; }
    public void setDob(String dob) { this.dob = dob; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public int getCreditScore() { return creditScore; }
    public void setCreditScore(int creditScore) { this.creditScore = creditScore; }

    public String getProduct() { return product; }
    public void setProduct(String product) { this.product = product; }

    public String getValidityPeriod() { return validityPeriod; }
    public void setValidityPeriod(String validityPeriod) { this.validityPeriod = validityPeriod; }

    public String getCreditLimit() { return creditLimit; }
    public void setCreditLimit(String creditLimit) { this.creditLimit = creditLimit; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public LocalDate getApprovalDate() { return approvalDate; }
    public void setApprovalDate(LocalDate approvalDate) { this.approvalDate = approvalDate; }
}


package com.scb.creditcardorigination.TransactionProcessingSystem.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf->csrf.disable()) // 🔑 disable CSRF so POST/PUT/DELETE work in Postman
                .authorizeHttpRequests(auth -> auth
                        .anyRequest().permitAll() // allow all requests without auth
                )
                .formLogin(form->form.disable())
                .httpBasic(basic->basic.disable());
        return http.build();
    }
}
import React, { useState } from "react";
import { Modal, Button, Form, Alert } from "react-bootstrap";
import { useNavigate } from "react-router-dom";
import sclogo from "../assets/sclogo.png";
import UnifiedLoginModalService from "../service/UnifiedLoginModalService";

function UnifiedLoginModal({ show, onHide }) {
  const [mode, setMode] = useState("customer"); // "customer" | "signup" | "sales"
  const [formData, setFormData] = useState({
    username: "",
    password: "",
    name: "",
    email: "",
    confirmPassword: "",
  });
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [registeredUser, setRegisteredUser] = useState(null);
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const resetForm = () => {
    setFormData({
      username: "",
      password: "",
      name: "",
      email: "",
      confirmPassword: "",
    });
    setError("");
    setSuccess("");
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setSuccess("");

    if (mode === "signup") {
      if (!formData.name || !formData.email || !formData.password || !formData.confirmPassword) {
        setError("All fields are required.");
        return;
      }
      if (formData.password !== formData.confirmPassword) {
        setError("Passwords do not match.");
        return;
      }
    
      try {
        const response = await UnifiedLoginModalService.signupCustomer({
          name: formData.name,
          email: formData.email,
          password: formData.password,
        });
        console.log("signup response:", response);
    
        setSuccess("Account created successfully! Please login.");
        setMode("customer");
        resetForm();
      } catch (err) {
        setError(err.error || "Signup failed.");
      }
      return;
    }

    if (mode === "customer") {
      if (!formData.username || !formData.password) {
        setError("Both email and password are required.");
        return;
      }
    
      try {
        const response = await UnifiedLoginModalService.loginCustomer({
          username: formData.username,
          password: formData.password,
        });
        console.log("customer login response:", response);
    
        setSuccess("Customer login successful!");
        localStorage.setItem("customerToken", response.token); // save JWT
        setTimeout(() => {
          onHide();
          navigate("/CreditCardApplicationForm");
        }, 1500);
      } catch (err) {
        setError(err.error || "Invalid email or password.");
      }
      return;
    }

    if (mode === "sales") {
      if (!formData.username || !formData.password) {
        setError("Both username and password are required.");
        return;
      }
      try{
        const response = await UnifiedLoginModalService.loginSalesUser({
          userId: formData.username,
          password: formData.password,
        });
        console.log("sales login response:", response)

      if (response.success){
      setSuccess("Sales login successful!");
      setTimeout(() => {
        onHide();
        navigate("/Onboarding"); // your sales route
      }, 1500);
    } else {
      setError(response.message || "Invalid sales cred");
    }
  }
     catch (err){
      setError("Invalid sales credentials.")
    }
      return;
    }
  };

  return (
    <Modal show={show} onHide={onHide} centered>
      <Modal.Body style={{ width: "100%", maxWidth: "400px", margin: "auto" }}>
        {/* Logo */}
        <div className="text-center">
          <img
            src={sclogo}
            alt="Standard Chartered"
            style={{ width: "200px", marginBottom: "20px" }}
          />
          <h5 style={{ marginBottom: "20px" }}>
            {mode === "customer" && "Customer Login"}
            {mode === "signup" && "Customer Sign Up"}
            {mode === "sales" && "Sales Login"}
          </h5>
        </div>

        {/* Alerts */}
        {error && <Alert variant="danger">{error}</Alert>}
        {success && <Alert variant="success">{success}</Alert>}

        <Form onSubmit={handleSubmit}>
          {/* Customer Sign Up */}
          {mode === "signup" && (
            <>
              <Form.Group className="mb-3">
                <Form.Control
                  type="text"
                  name="name"
                  placeholder="Full Name"
                  value={formData.name}
                  onChange={handleChange}
                />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Control
                  type="email"
                  name="email"
                  placeholder="Email"
                  value={formData.email}
                  onChange={handleChange}
                />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Control
                  type="password"
                  name="password"
                  placeholder="Create Password"
                  value={formData.password}
                  onChange={handleChange}
                />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Control
                  type="password"
                  name="confirmPassword"
                  placeholder="Confirm Password"
                  value={formData.confirmPassword}
                  onChange={handleChange}
                />
              </Form.Group>
            </>
          )}

          {/* Customer Login */}
          {mode === "customer" && (
            <>
              <Form.Group className="mb-3">
                <Form.Control
                  type="text"
                  name="username"
                  placeholder="Username (Email)"
                  value={formData.username}
                  onChange={handleChange}
                />
              </Form.Group>
              <Form.Group className="mb-2">
                <Form.Control
                  type="password"
                  name="password"
                  placeholder="Password"
                  value={formData.password}
                  onChange={handleChange}
                />
              </Form.Group>
              <div className="text-end mb-4">
                <a href="#" style={{ fontSize: "0.9rem" }}>
                  → Forgot Username / Password
                </a>
              </div>
            </>
          )}

          {/* Sales Login */}
          {mode === "sales" && (
            <>
              <Form.Group className="mb-3">
                <Form.Control
                  type="text"
                  name="username"
                  placeholder="Sales Username"
                  value={formData.username}
                  onChange={handleChange}
                />
              </Form.Group>
              <Form.Group className="mb-2">
                <Form.Control
                  type="password"
                  name="password"
                  placeholder="Password"
                  value={formData.password}
                  onChange={handleChange}
                />
              </Form.Group>
            </>
          )}

          {/* Buttons */}
          <div className="d-flex gap-3">
            <Button
              type="submit"
              style={{
                flex: 1,
                backgroundColor: "#0d6efd",
                border: "none",
                height: "45px",
              }}
            >
              {mode === "signup"
                ? "Sign Up"
                : mode === "customer"
                ? "Login"
                : "Login"}
            </Button>
            {mode !== "sales" && (
              <Button
                type="button"
                onClick={() => {
                  resetForm();
                  setMode(mode === "signup" ? "customer" : "signup");
                }}
                style={{
                  flex: 1,
                  backgroundColor: mode === "signup" ? "#0d6efd" : "#28a745",
                  border: "none",
                  height: "45px",
                }}
              >
                {mode === "signup" ? "Login" : "Sign Up"}
              </Button>
            )}
          </div>
        </Form>

        {/* Switch Links */}
        <div className="text-center mt-3">
          {mode !== "sales" ? (
            <a
              href="#"
              onClick={() => {
                resetForm();
                setMode("sales");
              }}
              style={{ fontSize: "0.9rem", color: "#0d6efd" }}
            >
              Are you a sales user?
            </a>
          ) : (
            <a
              href="#"
              onClick={() => {
                resetForm();
                setMode("customer");
              }}
              style={{ fontSize: "0.9rem", color: "#0d6efd" }}
            >
              ← Back to Customer Login
            </a>
          )}
        </div>
      </Modal.Body>
    </Modal>
  );
}

export default UnifiedLoginModal;
import React, { useState, useEffect } from "react";
import axios from "axios";
import "./SalesApplicationTable.css";

function SalesApplicationsTable() {
  const [applications, setApplications] = useState([]);


  const timelineStages = [
    "Application Submitted",
    "Application Processing",
    "Credit Card Offered",
    "Application Accepted",
    "Printed",
    "Shipped",
  ];

  
  useEffect(() => {
    axios
      .get("http://localhost:8080/api/transactions/all")
      .then((response) => {
        setApplications(response.data);
      })
      .catch((error) => {
        console.error("Error fetching transactions:", error);
      });
  }, []);

 
  const handleTimelineChange = (id, newTimeline) => {
   
    setApplications((prevApps) =>
      prevApps.map((app) =>
        app.id === id ? { ...app, applicationTimeline: newTimeline } : app
      )
    );

   
    axios
      .put(`http://localhost:8080/api/transactions/${id}/timeline`, {
        applicationTimeline: newTimeline,
      })
      .then((response) => {
        console.log("Timeline updated in DB:", response.data);
      })
      .catch((error) => {
        console.error("Error updating timeline:", error);
      });
  };

  return (
    <div className="sc-container">
      <h2 className="sc-title">Customer Credit Card Applications</h2>

      {applications.length > 0 ? (
        <div className="sc-table-wrapper">
          <table className="sc-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>Customer Name</th>
                <th>DOB</th>
                <th>Email</th>
                <th>Contact</th>
                <th>Credit Score</th>
                <th>Product</th>
                <th>Status</th>
                <th>Credit Limit</th>
                <th>Approval Date</th>
                <th>Processed By</th>
                <th>Application Timeline</th>
              </tr>
            </thead>
            <tbody>
              {applications.map((app) => (
                <tr key={app.id}>
                  <td>{app.id}</td>
                  <td>{app.name}</td>
                  <td>{app.dob}</td>
                  <td>{app.email}</td>
                  <td>{app.phone}</td>
                  <td>{app.creditScore}</td>
                  <td>{app.product}</td>
                  <td className={`status ${app.status?.toLowerCase()}`}>
                    {app.status}
                  </td>
                  <td>{app.creditLimit}</td>
                  <td>{app.approvalDate}</td>
                  <td>{app.processedBy}</td>
                  <td>
                    <select
                      value={app.applicationTimeline || "Application Submitted"}
                      onChange={(e) =>
                        handleTimelineChange(app.id, e.target.value)
                      }
                    >
                      {timelineStages.map((stage, index) => (
                        <option key={index} value={stage}>
                          {stage}
                        </option>
                      ))}
                    </select>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ) : (
        <p className="sc-empty">No applications found.</p>
      )}
    </div>
  );
}

export default SalesApplicationsTable;
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import logo from "../assets/sclogo.png";
import UnifiedLoginModalService from "../service/UnifiedLoginModalService"; // ✅ import service

function Header() {
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const navigate = useNavigate();

  const toggleDropdown = () => setDropdownOpen(!dropdownOpen);
  const closeDropdown = () => setDropdownOpen(false);

  const handleLogout = () => {
    // ✅ remove JWT token
    UnifiedLoginModalService.logoutCustomer();
    closeDropdown();
    navigate("/"); // redirect to login page
  };

  return (
    <>
      <style>{`
        body {
          margin: 0;
          font-family: 'Segoe UI', Arial, Helvetica, sans-serif;
        }
        .sc-navbar {
          background: #fff;
          border-bottom: 2px solid #ececec;
          height: 80px;
          display: flex;
          align-items: center;
          box-sizing: border-box;
          padding: 0 40px;
          justify-content: space-between;
          color: #222;
        }
        .sc-navbar .navbar-left img {
          height: 80px;
          cursor: pointer;
        }
        .sc-navbar .navbar-center {
          display: flex;
          gap: 48px;
          font-size: 18px;
          font-weight: 500;
          align-items: center;
        }
        .sc-navbar .navbar-center a {
          color: #222;
          text-decoration: none;
          padding: 4px 8px;
          border-radius: 5px;
          transition: background 0.2s, color 0.2s;
          cursor: pointer;
        }
        .sc-navbar .navbar-center a:hover,
        .sc-navbar .navbar-center a:focus {
          background: #f2f9ff;
          color: #1976d2;
        }
        .sc-navbar .navbar-right {
          position: relative;
        }
        .sc-navbar .dropdown-btn {
          background: none;
          border: none;
          font-size: 18px;
          font-weight: 500;
          color: #222;
          cursor: pointer;
          padding: 8px 22px;
          border-radius: 6px;
          transition: background 0.2s;
        }
        .sc-navbar .dropdown-btn:hover,
        .sc-navbar .dropdown-btn:focus {
          background: #f1f1f1;
          outline: none;
        }
        .sc-navbar .dropdown-content {
          position: absolute;
          right: 0;
          top: 100%;
          background: white;
          box-shadow: 0 8px 16px rgba(0, 0, 0, 0.07);
          border-radius: 8px;
          width: 180px;
          margin-top: 8px;
          z-index: 1000;
          display: ${dropdownOpen ? "block" : "none"};
          user-select: none;
        }
        .sc-navbar .dropdown-content a,
        .sc-navbar .dropdown-content button {
          display: block;
          width: 100%;
          padding: 12px 18px;
          color: #222;
          background: none;
          border: none;
          text-align: left;
          font-size: 16px;
          font-weight: 500;
          text-decoration: none;
          cursor: pointer;
          border-radius: 5px;
          transition: background 0.2s;
        }
        .sc-navbar .dropdown-content a:hover,
        .sc-navbar .dropdown-content button:hover {
          background: #f5faff;
        }
        .sc-navbar .login-btn {
          background: #008000;
          color: white;
          border: none;
          padding: 8px 24px;
          border-radius: 5px;
          font-size: 18px;
          font-weight: 500;
          cursor: pointer;
          margin-left: 30px;
          width: 100px;
          user-select: none;
        }
      `}</style>

      <nav className="sc-navbar">
        {/* Logo Left */}
        <div
          className="navbar-left"
          onClick={() => navigate("/")}
          style={{ cursor: "pointer" }}
        >
          <img src={logo} alt="Standard Chartered Logo" />
        </div>

        {/* Center Nav Links */}
        <div className="navbar-center">
          <Link to="/about">About Us</Link>
          <Link to="/invest">Invest</Link>
          <Link to="/offer">Offers</Link>
          <Link to="/help">Help</Link>
          <Link to="/services">Services</Link>
        </div>

        {/* Dropdown (Logout Menu) Right */}
        <div className="navbar-right">
          <button
            className="dropdown-btn"
            onClick={toggleDropdown}
            aria-expanded={dropdownOpen}
            aria-haspopup="true"
          >
            Logout ▾
          </button>
          <div className="dropdown-content" onMouseLeave={closeDropdown}>
            <Link to="/ApplicationStatus" onClick={closeDropdown}>
              Tracker
            </Link>
            <Link to="/CreditCardOfferCustomer" onClick={closeDropdown}>
              Offer Status
            </Link>
            <button onClick={handleLogout}>
              Logout
            </button>
          </div>
        </div>
      </nav>
    </>
  );
}

export default Header;
